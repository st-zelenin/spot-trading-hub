{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"CryptoPair": {
				"properties": {
					"symbol": {
						"type": "string"
					},
					"isArchived": {
						"type": "boolean"
					}
				},
				"required": [
					"symbol",
					"isArchived"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Trader": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"gate": {
						"items": {
							"$ref": "#/components/schemas/CryptoPair"
						},
						"type": "array"
					},
					"crypto": {
						"items": {
							"$ref": "#/components/schemas/CryptoPair"
						},
						"type": "array"
					},
					"coinbase": {
						"items": {
							"$ref": "#/components/schemas/CryptoPair"
						},
						"type": "array"
					},
					"bybit": {
						"items": {
							"$ref": "#/components/schemas/CryptoPair"
						},
						"type": "array"
					},
					"binance": {
						"items": {
							"$ref": "#/components/schemas/CryptoPair"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"gate",
					"crypto",
					"coinbase",
					"bybit",
					"binance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Trader_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/Trader",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExchangeType": {
				"description": "Enum representing supported exchanges",
				"enum": [
					"BINANCE",
					"BYBIT"
				],
				"type": "string"
			},
			"OrderedSymbols": {
				"description": "Request payload for ordering cryptocurrency pairs",
				"properties": {
					"exchange": {
						"$ref": "#/components/schemas/ExchangeType",
						"description": "The exchange for which the symbols are being ordered"
					},
					"symbols": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The ordered list of symbols"
					}
				},
				"required": [
					"exchange",
					"symbols"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TradingPair": {
				"properties": {
					"buyPrice": {
						"type": "number",
						"format": "double"
					},
					"sellPrice": {
						"type": "number",
						"format": "double"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"buyFilled": {
						"type": "boolean"
					},
					"buyOrderId": {
						"type": "number",
						"format": "double"
					},
					"sellOrderId": {
						"type": "number",
						"format": "double"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"buyPrice",
					"sellPrice",
					"quantity",
					"buyFilled",
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TradingPair-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/TradingPair"
						},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NewTradingPair": {
				"properties": {
					"buyPrice": {
						"type": "number",
						"format": "double"
					},
					"sellPrice": {
						"type": "number",
						"format": "double"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"buyFilled": {
						"type": "boolean"
					},
					"buyOrderId": {
						"type": "number",
						"format": "double"
					},
					"sellOrderId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"buyPrice",
					"sellPrice",
					"quantity",
					"buyFilled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TradingPair_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/TradingPair",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_unknown_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_null_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true,
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelOrderRequest": {
				"description": "Request body for cancelling an order",
				"properties": {
					"exchange": {
						"$ref": "#/components/schemas/ExchangeType",
						"description": "The exchange to cancel the order on",
						"example": "BINANCE"
					},
					"orderId": {
						"type": "string",
						"description": "The ID of the order to cancel",
						"example": "12345"
					},
					"symbol": {
						"type": "string",
						"description": "The trading pair symbol",
						"example": "BTCUSDT"
					}
				},
				"required": [
					"exchange",
					"orderId",
					"symbol"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelAllOrdersRequest": {
				"description": "Request body for cancelling all orders for a symbol",
				"properties": {
					"exchange": {
						"$ref": "#/components/schemas/ExchangeType",
						"description": "The exchange to cancel the orders on",
						"example": "BINANCE"
					},
					"symbol": {
						"type": "string",
						"description": "The trading pair symbol",
						"example": "BTCUSDT"
					}
				},
				"required": [
					"exchange",
					"symbol"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_string-or-null_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"type": "string",
						"nullable": true,
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TrailingTakeProfitLimitSellOrderRequest": {
				"description": "Request body for placing a trailing take profit limit sell order",
				"properties": {
					"exchange": {
						"$ref": "#/components/schemas/ExchangeType",
						"description": "The exchange to place the order on",
						"example": "BINANCE"
					},
					"symbol": {
						"type": "string",
						"description": "The trading pair symbol",
						"example": "BTCUSDT"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The quantity to sell",
						"example": 0.01
					},
					"limitPrice": {
						"type": "number",
						"format": "double",
						"description": "The limit price for the order",
						"example": 50000
					}
				},
				"required": [
					"exchange",
					"symbol",
					"quantity",
					"limitPrice"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_unknown-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TradeHistory": {
				"description": "Unified trade history model for all exchanges",
				"properties": {
					"id": {
						"type": "string",
						"description": "The ID of the trade"
					},
					"symbol": {
						"type": "string",
						"description": "The trading pair symbol"
					},
					"price": {
						"type": "number",
						"format": "double",
						"description": "The price at which the trade was executed"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The quantity of the trade"
					},
					"quoteQuantity": {
						"type": "number",
						"format": "double",
						"description": "The total value of the trade (price * quantity)"
					},
					"time": {
						"type": "string",
						"format": "date-time",
						"description": "The timestamp of the trade"
					},
					"isBuyer": {
						"type": "boolean",
						"description": "Whether the trade was a buy or sell"
					},
					"isMaker": {
						"type": "boolean",
						"description": "Whether the trade was a maker or taker"
					},
					"fee": {
						"type": "number",
						"format": "double",
						"description": "The fee amount"
					},
					"feeAsset": {
						"type": "string",
						"description": "The fee asset"
					},
					"orderId": {
						"type": "string",
						"description": "The order ID associated with the trade"
					},
					"clientOrderId": {
						"type": "string",
						"description": "The client order ID associated with the trade"
					}
				},
				"required": [
					"id",
					"symbol",
					"price",
					"quantity",
					"quoteQuantity",
					"time",
					"isBuyer",
					"isMaker",
					"orderId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TradeHistory-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/TradeHistory"
						},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateRecentHistoryRequest": {
				"description": "Request parameters for updating recent history",
				"properties": {
					"exchange": {
						"$ref": "#/components/schemas/ExchangeType",
						"description": "The exchange to get trade history from",
						"example": "BINANCE"
					},
					"symbol": {
						"type": "string",
						"description": "The trading pair symbol",
						"example": "BTCUSDT"
					}
				},
				"required": [
					"exchange",
					"symbol"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Ticker": {
				"description": "Unified ticker interface for all exchanges",
				"properties": {
					"last": {
						"type": "number",
						"format": "double"
					},
					"changePercentage": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"last",
					"changePercentage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.Ticker_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/Ticker"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ApiResponse_Record_string.Ticker__": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/Record_string.Ticker_",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Product": {
				"description": "Unified product model for exchange products/trading pairs",
				"properties": {
					"currencyPair": {
						"type": "string"
					},
					"minQuantity": {
						"type": "number",
						"format": "double"
					},
					"minTotal": {
						"type": "number",
						"format": "double"
					},
					"pricePrecision": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"currencyPair",
					"minQuantity",
					"minTotal",
					"pricePrecision"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Product-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Product"
						},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SymbolInfo": {
				"properties": {
					"baseAsset": {
						"type": "string"
					},
					"quoteAsset": {
						"type": "string"
					},
					"stepSize": {
						"type": "string"
					},
					"tickSize": {
						"type": "string"
					},
					"minNotional": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"baseAsset",
					"quoteAsset",
					"stepSize",
					"tickSize",
					"minNotional"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_SymbolInfo_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/SymbolInfo",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BinanceBotOrder": {
				"properties": {
					"symbol": {
						"type": "string"
					},
					"orderId": {
						"type": "number",
						"format": "double"
					},
					"orderListId": {
						"type": "number",
						"format": "double"
					},
					"clientOrderId": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"origQty": {
						"type": "string"
					},
					"executedQty": {
						"type": "string"
					},
					"cummulativeQuoteQty": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"timeInForce": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"side": {
						"type": "string"
					},
					"stopPrice": {
						"type": "string"
					},
					"icebergQty": {
						"type": "string"
					},
					"time": {
						"type": "number",
						"format": "double"
					},
					"updateTime": {
						"type": "number",
						"format": "double"
					},
					"isWorking": {
						"type": "boolean"
					},
					"workingTime": {
						"type": "number",
						"format": "double"
					},
					"origQuoteOrderQty": {
						"type": "string"
					},
					"selfTradePreventionMode": {
						"type": "string"
					},
					"botId": {
						"type": "string"
					}
				},
				"required": [
					"botId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_BinanceBotOrder-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/BinanceBotOrder"
						},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BotConfig": {
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"BotTradingPair": {
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"Bot": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/BotConfig"
					},
					"pairs": {
						"items": {
							"$ref": "#/components/schemas/BotTradingPair"
						},
						"type": "array"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"config",
					"pairs",
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Bot_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/Bot",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Bot-Array_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Bot"
						},
						"type": "array",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OrderStatistics": {
				"properties": {
					"buyOrdersCount": {
						"type": "number",
						"format": "double"
					},
					"sellOrdersCount": {
						"type": "number",
						"format": "double"
					},
					"totalBuyAmount": {
						"type": "number",
						"format": "double"
					},
					"totalSellAmount": {
						"type": "number",
						"format": "double"
					},
					"profitLoss": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"buyOrdersCount",
					"sellOrdersCount",
					"totalBuyAmount",
					"totalSellAmount",
					"profitLoss"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_OrderStatistics_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/OrderStatistics",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_BinanceBotOrder_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/BinanceBotOrder",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__ordersDeleted-number--testnetOrdersDeleted-number--filledOrdersQueueDeleted-number--testnetFilledOrdersQueueDeleted-number--botDeleted-boolean__": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"properties": {
							"botDeleted": {
								"type": "boolean"
							},
							"testnetFilledOrdersQueueDeleted": {
								"type": "number",
								"format": "double"
							},
							"filledOrdersQueueDeleted": {
								"type": "number",
								"format": "double"
							},
							"testnetOrdersDeleted": {
								"type": "number",
								"format": "double"
							},
							"ordersDeleted": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"botDeleted",
							"testnetFilledOrdersQueueDeleted",
							"filledOrdersQueueDeleted",
							"testnetOrdersDeleted",
							"ordersDeleted"
						],
						"type": "object",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MigrationResult": {
				"properties": {
					"ordersProcessed": {
						"type": "number",
						"format": "double",
						"description": "Number of orders that were processed during migration"
					}
				},
				"required": [
					"ordersProcessed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_MigrationResult_": {
				"description": "Base response interface for all API responses",
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Indicates if the operation was successful"
					},
					"error": {
						"type": "string",
						"description": "Optional error message in case of failure"
					},
					"data": {
						"$ref": "#/components/schemas/MigrationResult",
						"description": "Optional data payload in case of success"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MigrateSymbolRequest": {
				"properties": {
					"from": {
						"type": "string",
						"description": "The symbol to migrate from",
						"example": "CYBERUSDT"
					},
					"to": {
						"type": "string",
						"description": "The symbol to migrate to",
						"example": "CYBERUSDC"
					}
				},
				"required": [
					"from",
					"to"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "spot-trading-hub",
		"version": "1.0.0",
		"description": "A Node.js application for managing crypto exchange spot orders",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/user": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "User data retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Trader_"
								}
							}
						}
					}
				},
				"description": "Get user data",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": []
			}
		},
		"/user/pairs/order": {
			"post": {
				"operationId": "OrderPairs",
				"responses": {
					"200": {
						"description": "Pairs ordered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Trader_"
								}
							}
						}
					}
				},
				"description": "Order cryptocurrency pairs according to user preference",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The ordered symbols payload",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrderedSymbols",
								"description": "The ordered symbols payload"
							}
						}
					}
				}
			}
		},
		"/user/pairs/add/{exchange}/{symbol}": {
			"post": {
				"operationId": "AddPair",
				"responses": {
					"200": {
						"description": "Pair added successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Trader_"
								}
							}
						}
					}
				},
				"description": "Add a cryptocurrency pair to user's list",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange type",
						"in": "path",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					},
					{
						"description": "The symbol to add",
						"in": "path",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/user/pairs/remove/{exchange}/{symbol}": {
			"delete": {
				"operationId": "RemovePair",
				"responses": {
					"200": {
						"description": "Pair removed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Trader_"
								}
							}
						}
					}
				},
				"description": "Remove a cryptocurrency pair from user's list",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange type",
						"in": "path",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					},
					{
						"description": "The symbol to remove",
						"in": "path",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/trading-pairs": {
			"get": {
				"operationId": "GetAllTradingPairs",
				"responses": {
					"200": {
						"description": "Trading pairs retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TradingPair-Array_"
								}
							}
						}
					}
				},
				"description": "Get all trading pairs",
				"tags": [
					"Trading Pairs"
				],
				"security": [],
				"parameters": [
					{
						"description": "Optional bot ID to filter trading pairs",
						"in": "query",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateTradingPairs",
				"responses": {
					"201": {
						"description": "Trading pairs created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TradingPair-Array_"
								}
							}
						}
					}
				},
				"description": "Create multiple trading pairs",
				"tags": [
					"Trading Pairs"
				],
				"security": [],
				"parameters": [
					{
						"description": "Bot ID for the trading pairs",
						"in": "query",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Array of trading pairs to create (without id)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/NewTradingPair"
								},
								"type": "array",
								"description": "Array of trading pairs to create (without id)"
							}
						}
					}
				}
			}
		},
		"/trading-pairs/{id}": {
			"put": {
				"operationId": "UpdateTradingPair",
				"responses": {
					"200": {
						"description": "Trading pair updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TradingPair_"
								}
							}
						}
					}
				},
				"description": "Update a trading pair by ID",
				"tags": [
					"Trading Pairs"
				],
				"security": [],
				"parameters": [
					{
						"description": "Trading pair ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Partial trading pair data to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TradingPair",
								"description": "Partial trading pair data to update"
							}
						}
					}
				}
			}
		},
		"/order": {
			"get": {
				"operationId": "GetExchangeRawOrder",
				"responses": {
					"200": {
						"description": "Exchange raw order",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_unknown_"
								}
							}
						}
					}
				},
				"description": "Get exchange raw order",
				"tags": [
					"Order"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					},
					{
						"in": "query",
						"name": "orderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/order/cancel": {
			"post": {
				"operationId": "CancelOrder",
				"responses": {
					"200": {
						"description": "Order cancelled successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Cancels an order on the specified exchange",
				"tags": [
					"Order"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The order cancellation request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelOrderRequest",
								"description": "The order cancellation request"
							}
						}
					}
				}
			}
		},
		"/order/cancel-all": {
			"post": {
				"operationId": "CancelAllOrders",
				"responses": {
					"200": {
						"description": "All orders cancelled successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Cancels all orders for a symbol on the specified exchange",
				"tags": [
					"Order"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The order cancellation request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelAllOrdersRequest",
								"description": "The order cancellation request"
							}
						}
					}
				}
			}
		},
		"/order/trailing-sell": {
			"post": {
				"operationId": "PlaceTrailingTakeProfitLimitSellOrder",
				"responses": {
					"200": {
						"description": "Order placed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_string-or-null_"
								}
							}
						}
					}
				},
				"description": "Places a trailing take profit limit sell order on the specified exchange",
				"tags": [
					"Order"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The order request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TrailingTakeProfitLimitSellOrderRequest",
								"description": "The order request"
							}
						}
					}
				}
			}
		},
		"/order/open": {
			"get": {
				"operationId": "GetAllOpenOrders",
				"responses": {
					"200": {
						"description": "All open orders",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_unknown-Array_"
								}
							}
						}
					}
				},
				"description": "Get all open orders for the specified exchange",
				"tags": [
					"Order"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange type",
						"in": "query",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					}
				]
			}
		},
		"/history/history": {
			"get": {
				"operationId": "GetTradeHistory",
				"responses": {
					"200": {
						"description": "Trade history",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TradeHistory-Array_"
								}
							}
						}
					}
				},
				"description": "Get trade history for a specific exchange",
				"tags": [
					"Trade History"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange to get trade history from",
						"in": "query",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					},
					{
						"description": "The symbol to filter trades",
						"in": "query",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/history/recent": {
			"post": {
				"operationId": "UpdateRecentHistory",
				"responses": {
					"200": {
						"description": "Raw recent filled orders",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_unknown_"
								}
							}
						}
					}
				},
				"description": "Fetch recent filled orders from the specified exchange and log them",
				"tags": [
					"Trade History"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateRecentHistoryRequest"
							}
						}
					}
				}
			}
		},
		"/exchange/{exchange}/trader-tickers": {
			"get": {
				"operationId": "GetTraderTickers",
				"responses": {
					"200": {
						"description": "Tickers retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Record_string.Ticker__"
								}
							}
						}
					}
				},
				"description": "Get tickers from a specific exchange",
				"tags": [
					"Exchange"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange to get tickers from",
						"in": "path",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					}
				]
			}
		},
		"/exchange/{exchange}/products": {
			"get": {
				"operationId": "GetProducts",
				"responses": {
					"200": {
						"description": "Products retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Product-Array_"
								}
							}
						}
					}
				},
				"description": "Get available trading products/pairs from a specific exchange",
				"tags": [
					"Exchange"
				],
				"security": [],
				"parameters": [
					{
						"description": "The exchange to get products from",
						"in": "path",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					}
				]
			}
		},
		"/exchange/{exchange}/symbol/{symbol}": {
			"get": {
				"operationId": "GetSymbolInfo",
				"responses": {
					"200": {
						"description": "Symbol information retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_SymbolInfo_"
								}
							}
						}
					}
				},
				"description": "Get symbol information from a specific exchange",
				"tags": [
					"Exchange"
				],
				"security": [],
				"parameters": [
					{
						"description": "The trading pair symbol",
						"in": "path",
						"name": "symbol",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The exchange to get symbol info from",
						"in": "path",
						"name": "exchange",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/ExchangeType"
						}
					}
				]
			}
		},
		"/binance-bot/{botId}/orders": {
			"get": {
				"operationId": "GetBotOrders",
				"responses": {
					"200": {
						"description": "Bot orders",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_BinanceBotOrder-Array_"
								}
							}
						}
					}
				},
				"description": "Get all orders for a specific bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/binance-bot/{botId}": {
			"get": {
				"operationId": "GetBot",
				"responses": {
					"200": {
						"description": "Bot",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Bot_"
								}
							}
						}
					}
				},
				"description": "Get configuration for a specific bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/binance-bot/{botId}/config": {
			"put": {
				"operationId": "UpdateBotConfig",
				"responses": {
					"200": {
						"description": "Bot configuration updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Update configuration for a specific bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The bot configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BotConfig",
								"description": "The bot configuration"
							}
						}
					}
				}
			}
		},
		"/binance-bot/{botId}/pairs": {
			"put": {
				"operationId": "UpdateBotPairs",
				"responses": {
					"200": {
						"description": "Bot pairs updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Update trading pairs for a specific bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The bot trading pairs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/BotTradingPair"
								},
								"type": "array",
								"description": "The bot trading pairs"
							}
						}
					}
				}
			}
		},
		"/binance-bot": {
			"post": {
				"operationId": "CreateBot",
				"responses": {
					"201": {
						"description": "Bot configuration created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Bot_"
								}
							}
						}
					}
				},
				"description": "Create configuration for a specific bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The bot configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BotConfig",
								"description": "The bot configuration"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAllBots",
				"responses": {
					"200": {
						"description": "All bots",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Bot-Array_"
								}
							}
						}
					}
				},
				"description": "Get all bots",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": []
			}
		},
		"/binance-bot/statistics/all": {
			"get": {
				"operationId": "GetOrderStatistics",
				"responses": {
					"200": {
						"description": "Order statistics",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_OrderStatistics_"
								}
							}
						}
					}
				},
				"description": "Get statistics for all orders",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": []
			}
		},
		"/binance-bot/{botId}/statistics": {
			"get": {
				"operationId": "GetBotStatistics",
				"responses": {
					"200": {
						"description": "Bot order statistics",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_OrderStatistics_"
								}
							}
						}
					}
				},
				"description": "Get statistics for a specific bot's orders",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/binance-bot/{botId}/filled-order": {
			"post": {
				"operationId": "AddBotFilledOrder",
				"responses": {
					"200": {
						"description": "Order",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_BinanceBotOrder_"
								}
							}
						}
					}
				},
				"description": "Add a Binance order to the bot's orders",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The order request containing orderId and symbol",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"symbol": {
										"type": "string"
									},
									"orderId": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"symbol",
									"orderId"
								],
								"type": "object",
								"description": "The order request containing orderId and symbol"
							}
						}
					}
				}
			}
		},
		"/binance-bot/cleanup/testnet/{botId}": {
			"delete": {
				"operationId": "CleanupTestnetBot",
				"responses": {
					"200": {
						"description": "Testnet bot data cleaned up",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse__ordersDeleted-number--testnetOrdersDeleted-number--filledOrdersQueueDeleted-number--testnetFilledOrdersQueueDeleted-number--botDeleted-boolean__"
								}
							}
						}
					}
				},
				"description": "Cleanup all data related to a testnet bot",
				"tags": [
					"Binance Bot"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the bot to cleanup",
						"in": "path",
						"name": "botId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/admin/migrate-symbol": {
			"post": {
				"operationId": "MigrateSymbol",
				"responses": {
					"200": {
						"description": "Symbol migration completed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_MigrationResult_"
								}
							}
						}
					}
				},
				"description": "Migrate orders from one symbol to another",
				"tags": [
					"Admin"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The migration request containing from and to symbols",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MigrateSymbolRequest",
								"description": "The migration request containing from and to symbols"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/api"
		}
	],
	"tags": [
		{
			"name": "Order",
			"description": "Order management endpoints"
		},
		{
			"name": "Trade History",
			"description": "Trade history endpoints"
		},
		{
			"name": "Binance Bot",
			"description": "Binance bot management endpoints"
		},
		{
			"name": "User",
			"description": "User management endpoints"
		}
	]
}